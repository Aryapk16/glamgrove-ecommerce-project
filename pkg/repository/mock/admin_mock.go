// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interfaces/adminInterface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	request "glamgrove/pkg/utils/request"
	response "glamgrove/pkg/utils/response"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockAdminRepository is a mock of AdminRepository interface.
type MockAdminRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdminRepositoryMockRecorder
}

// MockAdminRepositoryMockRecorder is the mock recorder for MockAdminRepository.
type MockAdminRepositoryMockRecorder struct {
	mock *MockAdminRepository
}

// NewMockAdminRepository creates a new mock instance.
func NewMockAdminRepository(ctrl *gomock.Controller) *MockAdminRepository {
	mock := &MockAdminRepository{ctrl: ctrl}
	mock.recorder = &MockAdminRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminRepository) EXPECT() *MockAdminRepositoryMockRecorder {
	return m.recorder
}

// AmountDetails mocks base method.
func (m *MockAdminRepository) AmountDetails(c context.Context) (request.DashboardAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmountDetails", c)
	ret0, _ := ret[0].(request.DashboardAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmountDetails indicates an expected call of AmountDetails.
func (mr *MockAdminRepositoryMockRecorder) AmountDetails(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmountDetails", reflect.TypeOf((*MockAdminRepository)(nil).AmountDetails), c)
}

// ApproveReturnOrder mocks base method.
func (m *MockAdminRepository) ApproveReturnOrder(c context.Context, data request.ApproveReturnRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveReturnOrder", c, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveReturnOrder indicates an expected call of ApproveReturnOrder.
func (mr *MockAdminRepositoryMockRecorder) ApproveReturnOrder(c, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveReturnOrder", reflect.TypeOf((*MockAdminRepository)(nil).ApproveReturnOrder), c, data)
}

// BlockUnBlockUser mocks base method.
func (m *MockAdminRepository) BlockUnBlockUser(ctx context.Context, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUnBlockUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockUnBlockUser indicates an expected call of BlockUnBlockUser.
func (mr *MockAdminRepositoryMockRecorder) BlockUnBlockUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUnBlockUser", reflect.TypeOf((*MockAdminRepository)(nil).BlockUnBlockUser), ctx, userID)
}

// DashBoardOrder mocks base method.
func (m *MockAdminRepository) DashBoardOrder(c context.Context) (request.DashboardOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashBoardOrder", c)
	ret0, _ := ret[0].(request.DashboardOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashBoardOrder indicates an expected call of DashBoardOrder.
func (mr *MockAdminRepositoryMockRecorder) DashBoardOrder(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashBoardOrder", reflect.TypeOf((*MockAdminRepository)(nil).DashBoardOrder), c)
}

// DashBoardProductDetails mocks base method.
func (m *MockAdminRepository) DashBoardProductDetails(c context.Context) (request.DashBoardProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashBoardProductDetails", c)
	ret0, _ := ret[0].(request.DashBoardProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashBoardProductDetails indicates an expected call of DashBoardProductDetails.
func (mr *MockAdminRepositoryMockRecorder) DashBoardProductDetails(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashBoardProductDetails", reflect.TypeOf((*MockAdminRepository)(nil).DashBoardProductDetails), c)
}

// DashboardUserDetails mocks base method.
func (m *MockAdminRepository) DashboardUserDetails(c context.Context) (request.DashboardUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashboardUserDetails", c)
	ret0, _ := ret[0].(request.DashboardUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardUserDetails indicates an expected call of DashboardUserDetails.
func (mr *MockAdminRepositoryMockRecorder) DashboardUserDetails(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardUserDetails", reflect.TypeOf((*MockAdminRepository)(nil).DashboardUserDetails), c)
}

// FilteredSalesReport mocks base method.
func (m *MockAdminRepository) FilteredSalesReport(ctx context.Context, startTime, endTime time.Time) (request.SalesReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilteredSalesReport", ctx, startTime, endTime)
	ret0, _ := ret[0].(request.SalesReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilteredSalesReport indicates an expected call of FilteredSalesReport.
func (mr *MockAdminRepositoryMockRecorder) FilteredSalesReport(ctx, startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilteredSalesReport", reflect.TypeOf((*MockAdminRepository)(nil).FilteredSalesReport), ctx, startTime, endTime)
}

// GetAllUser mocks base method.
func (m *MockAdminRepository) GetAllUser(ctx context.Context, page request.ReqPagination) ([]response.UserResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUser", ctx, page)
	ret0, _ := ret[0].([]response.UserResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUser indicates an expected call of GetAllUser.
func (mr *MockAdminRepositoryMockRecorder) GetAllUser(ctx, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUser", reflect.TypeOf((*MockAdminRepository)(nil).GetAllUser), ctx, page)
}

// TotalRevenue mocks base method.
func (m *MockAdminRepository) TotalRevenue(c context.Context) (request.DashboardRevenue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalRevenue", c)
	ret0, _ := ret[0].(request.DashboardRevenue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalRevenue indicates an expected call of TotalRevenue.
func (mr *MockAdminRepositoryMockRecorder) TotalRevenue(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalRevenue", reflect.TypeOf((*MockAdminRepository)(nil).TotalRevenue), c)
}
