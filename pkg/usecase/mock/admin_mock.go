// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interfaces/adminInterface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "glamgrove/pkg/domain"
	request "glamgrove/pkg/utils/request"
	response "glamgrove/pkg/utils/response"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdminService is a mock of AdminService interface.
type MockAdminService struct {
	ctrl     *gomock.Controller
	recorder *MockAdminServiceMockRecorder
}

// MockAdminServiceMockRecorder is the mock recorder for MockAdminService.
type MockAdminServiceMockRecorder struct {
	mock *MockAdminService
}

// NewMockAdminService creates a new mock instance.
func NewMockAdminService(ctrl *gomock.Controller) *MockAdminService {
	mock := &MockAdminService{ctrl: ctrl}
	mock.recorder = &MockAdminServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminService) EXPECT() *MockAdminServiceMockRecorder {
	return m.recorder
}

// ApproveReturnOrder mocks base method.
func (m *MockAdminService) ApproveReturnOrder(c context.Context, data request.ApproveReturnRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveReturnOrder", c, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveReturnOrder indicates an expected call of ApproveReturnOrder.
func (mr *MockAdminServiceMockRecorder) ApproveReturnOrder(c, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveReturnOrder", reflect.TypeOf((*MockAdminService)(nil).ApproveReturnOrder), c, data)
}

// BlockUnBlockUser mocks base method.
func (m *MockAdminService) BlockUnBlockUser(c context.Context, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUnBlockUser", c, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockUnBlockUser indicates an expected call of BlockUnBlockUser.
func (mr *MockAdminServiceMockRecorder) BlockUnBlockUser(c, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUnBlockUser", reflect.TypeOf((*MockAdminService)(nil).BlockUnBlockUser), c, userID)
}

// DashBoard mocks base method.
func (m *MockAdminService) DashBoard(c context.Context) (request.CompleteAdminDashboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashBoard", c)
	ret0, _ := ret[0].(request.CompleteAdminDashboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashBoard indicates an expected call of DashBoard.
func (mr *MockAdminServiceMockRecorder) DashBoard(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashBoard", reflect.TypeOf((*MockAdminService)(nil).DashBoard), c)
}

// FilteredSalesReport mocks base method.
func (m *MockAdminService) FilteredSalesReport(c context.Context, timePeriod string) (request.SalesReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilteredSalesReport", c, timePeriod)
	ret0, _ := ret[0].(request.SalesReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilteredSalesReport indicates an expected call of FilteredSalesReport.
func (mr *MockAdminServiceMockRecorder) FilteredSalesReport(c, timePeriod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilteredSalesReport", reflect.TypeOf((*MockAdminService)(nil).FilteredSalesReport), c, timePeriod)
}

// GetAllUser mocks base method.
func (m *MockAdminService) GetAllUser(c context.Context, page request.ReqPagination) ([]response.UserResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUser", c, page)
	ret0, _ := ret[0].([]response.UserResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUser indicates an expected call of GetAllUser.
func (mr *MockAdminServiceMockRecorder) GetAllUser(c, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUser", reflect.TypeOf((*MockAdminService)(nil).GetAllUser), c, page)
}

// Login mocks base method.
func (m *MockAdminService) Login(c context.Context, admin domain.Admin) (domain.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", c, admin)
	ret0, _ := ret[0].(domain.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAdminServiceMockRecorder) Login(c, admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAdminService)(nil).Login), c, admin)
}
