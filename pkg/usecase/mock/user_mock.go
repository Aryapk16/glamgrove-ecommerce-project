// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interfaces/userInterface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "glamgrove/pkg/domain"
	request "glamgrove/pkg/utils/request"
	response "glamgrove/pkg/utils/response"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Addaddress mocks base method.
func (m *MockUserService) Addaddress(ctx context.Context, address request.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addaddress", ctx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// Addaddress indicates an expected call of Addaddress.
func (mr *MockUserServiceMockRecorder) Addaddress(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addaddress", reflect.TypeOf((*MockUserService)(nil).Addaddress), ctx, address)
}

// DeleteAddress mocks base method.
func (m *MockUserService) DeleteAddress(ctx context.Context, userID, addressID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", ctx, userID, addressID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockUserServiceMockRecorder) DeleteAddress(ctx, userID, addressID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockUserService)(nil).DeleteAddress), ctx, userID, addressID)
}

// FindUser mocks base method.
func (m *MockUserService) FindUser(ctx context.Context, user domain.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", ctx, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockUserServiceMockRecorder) FindUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockUserService)(nil).FindUser), ctx, user)
}

// GetAllAddress mocks base method.
func (m *MockUserService) GetAllAddress(ctx context.Context, userId uint) ([]response.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAddress", ctx, userId)
	ret0, _ := ret[0].([]response.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddress indicates an expected call of GetAllAddress.
func (mr *MockUserServiceMockRecorder) GetAllAddress(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddress", reflect.TypeOf((*MockUserService)(nil).GetAllAddress), ctx, userId)
}

// GetCartItemsbyCartId mocks base method.
func (m *MockUserService) GetCartItemsbyCartId(ctx context.Context, page request.ReqPagination, userID uint) ([]response.CartItemResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemsbyCartId", ctx, page, userID)
	ret0, _ := ret[0].([]response.CartItemResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItemsbyCartId indicates an expected call of GetCartItemsbyCartId.
func (mr *MockUserServiceMockRecorder) GetCartItemsbyCartId(ctx, page, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemsbyCartId", reflect.TypeOf((*MockUserService)(nil).GetCartItemsbyCartId), ctx, page, userID)
}

// Login mocks base method.
func (m *MockUserService) Login(ctx context.Context, user domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, user)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), ctx, user)
}

// OTPLogin mocks base method.
func (m *MockUserService) OTPLogin(ctx context.Context, user domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OTPLogin", ctx, user)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OTPLogin indicates an expected call of OTPLogin.
func (mr *MockUserServiceMockRecorder) OTPLogin(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OTPLogin", reflect.TypeOf((*MockUserService)(nil).OTPLogin), ctx, user)
}

// Profile mocks base method.
func (m *MockUserService) Profile(ctx context.Context, userId uint) (response.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Profile", ctx, userId)
	ret0, _ := ret[0].(response.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Profile indicates an expected call of Profile.
func (mr *MockUserServiceMockRecorder) Profile(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Profile", reflect.TypeOf((*MockUserService)(nil).Profile), ctx, userId)
}

// RemoveCartItem mocks base method.
func (m *MockUserService) RemoveCartItem(ctx context.Context, DelCartItem request.DeleteCartItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCartItem", ctx, DelCartItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCartItem indicates an expected call of RemoveCartItem.
func (mr *MockUserServiceMockRecorder) RemoveCartItem(ctx, DelCartItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCartItem", reflect.TypeOf((*MockUserService)(nil).RemoveCartItem), ctx, DelCartItem)
}

// SaveCartItem mocks base method.
func (m *MockUserService) SaveCartItem(ctx context.Context, addToCart request.AddToCartReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCartItem", ctx, addToCart)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCartItem indicates an expected call of SaveCartItem.
func (mr *MockUserServiceMockRecorder) SaveCartItem(ctx, addToCart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCartItem", reflect.TypeOf((*MockUserService)(nil).SaveCartItem), ctx, addToCart)
}

// SendOtpForgotPass mocks base method.
func (m *MockUserService) SendOtpForgotPass(ctx context.Context, phn string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOtpForgotPass", ctx, phn)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOtpForgotPass indicates an expected call of SendOtpForgotPass.
func (mr *MockUserServiceMockRecorder) SendOtpForgotPass(ctx, phn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOtpForgotPass", reflect.TypeOf((*MockUserService)(nil).SendOtpForgotPass), ctx, phn)
}

// SignUp mocks base method.
func (m *MockUserService) SignUp(ctx context.Context, user domain.User) (response.UserSignUp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, user)
	ret0, _ := ret[0].(response.UserSignUp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserServiceMockRecorder) SignUp(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserService)(nil).SignUp), ctx, user)
}

// UpdateAddress mocks base method.
func (m *MockUserService) UpdateAddress(ctx context.Context, address request.AddressPatch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", ctx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserServiceMockRecorder) UpdateAddress(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserService)(nil).UpdateAddress), ctx, address)
}

// UpdateCart mocks base method.
func (m *MockUserService) UpdateCart(ctx context.Context, cartUpadates request.UpdateCartReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCart", ctx, cartUpadates)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCart indicates an expected call of UpdateCart.
func (mr *MockUserServiceMockRecorder) UpdateCart(ctx, cartUpadates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCart", reflect.TypeOf((*MockUserService)(nil).UpdateCart), ctx, cartUpadates)
}
